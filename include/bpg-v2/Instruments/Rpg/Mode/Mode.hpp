// Copyright (c) 2009 Ryan Seal <rlseal -at- gmail.com>
//
// This file is part of Bit Pattern Generator (BPG) Software.
//
// BPG is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//  
// BPG is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with BPG.  If not, see <http://www.gnu.org/licenses/>.
//////////////////////////////////////////////////////////////////////////////////////////
///\file Mode.h
///
///The Mode is the data structure used to store the bit patterns.
///
///Authors: Alex Hackett, Ryan Seal
///Modified: 5/28/09
//////////////////////////////////////////////////////////////////////////////////////////

#ifndef MODE_H
#define MODE_H

#include <cstddef>
#include <vector>
#include <string>

////////////////////////////////////////////////////////////////////////////////////////
///\brief The both the bitstream pattern and the Mode name are stored in the Mode structure.
////////////////////////////////////////////////////////////////////////////////////////
struct Mode
{
   private:

      typedef std::vector<uint16_t> DataVector;

      DataVector data_;
      std::string name_;

   public:

      ///////////////////////////////////////////////////////////////////////////////////////
      ///\brief Default constructure sets both name_ and data_ to NULL
      ///////////////////////////////////////////////////////////////////////////////////////
      Mode(): data_(0), name_(""){}

      //////////////////////////////////////////////////////////////////////////////////////
      ///\brief Overloaded constructor in which both the name and data std::vector are specified
      //////////////////////////////////////////////////////////////////////////////////////
      Mode(const DataVector& data, const std::string& name): data_(data), name_(name){}

      //////////////////////////////////////////////////////////////////////////////////////
      ///\brief returns the data std::vector
      //////////////////////////////////////////////////////////////////////////////////////
      DataVector& Data() { return data_;}

      /////////////////////////////////////////////////////////////////////////////////////
      ///\brief returns the Mode name
      ////////////////////////////////////////////////////////////////////////////////////
      std::string& Name() { return name_;}

      ////////////////////////////////////////////////////////////////////////////////////
      ///\brief sets the mode data std::vector
      ///////////////////////////////////////////////////////////////////////////////////
      void Data(const DataVector& data) { data_ = data;}

      ///////////////////////////////////////////////////////////////////////////////////
      ///\brief sets teh mode name
      /////////////////////////////////////////////////////////////////////////////////
      void Name(const std::string& name) { name_ = name;}
};

#endif
